embed
<drac2>
# *******************************************************
# * This work includes material taken from the System Reference Document 5.1 
# * (“SRD 5.1”) by Wizards of the Coast LLC and available at https://dnd.wizards.com/resources/systems-reference-document. 
# * The SRD 5.1 is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# * 
# * This work includes material written by Seth Hartman (aka ShadowsStride)
# * and is licensed under the Creative Commons Attribution 4.0 International License 
# * available at https://creativecommons.org/licenses/by/4.0/legalcode.
# *******************************************************


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def set_default_settings(dictionary: dict, default_dictionary: dict) -> dict:
    """
    Loops through dictionary checking for missing entries and adding default ones where necessary

    Args:
        dictionary (dict): Dictionary to be checked
        default_dictionary (dict): Default dictionary

    Return:
        dict: Corrected dictionary
    """

    # For each key in the default dictionary
    for default_key in default_dictionary.keys():

        if default_key in dictionary.keys():
            pass

        else:
            dictionary[default_key] = default_dictionary[default_key]

    return dictionary


def get_classes(ch: character, subclass_bool: int, full_subclass_bool: int) -> str:
    """
    Grabs class information and (optional) subclass information
    
    Args:
        ch (character): Character object
        subclass_bool (bool): Whether subclass is included

    Return:
        result_string (str): Resultant string
    """
    # Variable setup
    class_list = []

    # If subclass is being used
    if subclass_bool == 1:

        # If subclass CVAR exists, load dictionary
        if (cvar_subclass_test := ch.get_cvar('subclass')):
            cvar_subclass_dict = load_json(cvar_subclass_test)

        # If CVAR dict does not exist
        else:
            cvar_subclass_dict = {}
            subclass_bool = 0

    # Grabs all the class(es) and level(s)
    class_details = {player_cls: level for player_cls, level in ch.levels}

    # For player class in class level
    for player_cls, cls_level in class_details.items():

        # If blood in player class
        if "blood" in player_cls.lower():
            player_cls = "blood"

        # If it finds a match (and subclass is true)
        if (result_key := search_list(player_cls, cvar_subclass_dict.keys())) and subclass_bool == 1:

            match result_key[0]:

                case c if "sorcerer" in c.lower():
                    class_list.append(f"{cvar_subclass_dict[result_key[0]]} Sorcerer ({cls_level})")

                # If barbarian
                case c if "barbarian" in c.lower():

                    # If at least level 3 and full subclass
                    if cls_level >= 3 and full_subclass_bool == 1 and cvar_subclass_dict[result_key[0]].lower() != "shadow gnawer":

                        # If not wild magic or shadow gnawer
                        if cvar_subclass_dict[result_key[0]].lower() != "wild magic":
                            class_list.append(f"Path of the {cvar_subclass_dict[result_key[0]]} Barbarian ({cls_level})")

                        # If wild magic
                        else:
                            class_list.append(f"Path of Wild Magic Barbarian ({cls_level})")

                    # If at least level 3 and not full subclass
                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Barbarian ({cls_level})")

                    # If not at least level 3
                    else:
                        class_list.append(f"Barbarian ({cls_level})")

                # If bard
                case c if "bard" in c.lower():

                    # If at least level 3 and full subclass
                    if cls_level >= 3 and full_subclass_bool == 1:
                        class_list.append(f"College of {cvar_subclass_dict[result_key[0]]} Bard ({cls_level})")

                    # If at least level 3 and not full subclass
                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Bard ({cls_level})")

                    # If not at least level 3
                    else:
                        class_list.append(f"Bard ({cls_level})")

                # If blood hunter
                case c if "blood" in c.lower():

                    # If at least level 3 and full subclass
                    if cls_level >= 3 and full_subclass_bool == 1:
                        class_list.append(f"Order of the {cvar_subclass_dict[result_key[0]]} Blood Hunter ({cls_level})")

                    # If at least level 3 and not full subclass
                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Blood Hunter ({cls_level})")

                    # If not at least level 3
                    else:
                        class_list.append(f"Blood Hunter ({cls_level})")

                # If cleric
                case c if "cleric" in c.lower():

                    # If full subclass
                    if full_subclass_bool == 1:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Domain Cleric ({cls_level})")

                    # If not full subclass
                    else:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Cleric ({cls_level})")

                # If druid
                case c if "druid" in c.lower():

                    # If at least level 2 and full subclass
                    if cls_level >= 2 and full_subclass_bool == 1:

                        # If dreams, spores, stars, or wildfire
                        if cvar_subclass_dict[result_key[0]].lower() in ['dreams', 'spores', 'stars', 'wildfire', "dragons", "shadows"]:
                            class_list.append(f"Circle of {cvar_subclass_dict[result_key[0]]} Druid ({cls_level})")

                        # If not dreams, spores, stars, wildfire, dragons, or shadows
                        else:
                           class_list.append(f"Circle of the {cvar_subclass_dict[result_key[0]]} Druid ({cls_level})")

                    # If at least level 2 and not full subclass
                    elif cls_level >= 2:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Druid ({cls_level})")

                    # If not at least level 2
                    else:
                        class_list.append("Druid (1)")

                # If monk
                case c if "monk" in c.lower():

                    # If at least level 3 and full subclass
                    if cls_level >= 3 and full_subclass_bool == 1 and cvar_subclass_dict[result_key[0]].lower() != "sheep dragon shepherd":

                        # If not mercy or shadow
                        if cvar_subclass_dict[result_key[0]].lower() not in ['mercy', 'shadow']:
                            class_list.append(f"Way of the {cvar_subclass_dict[result_key[0]]} Monk ({cls_level})")

                        # If mercy or shadow
                        else:
                            class_list.append(f"Way of {cvar_subclass_dict[result_key[0]]} Monk ({cls_level})")

                    # If at least level 3 and not full subclass
                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Monk ({cls_level})")

                    # If not at least level 3
                    else:
                        class_list.append(f"Monk ({cls_level})")

                # If paladin
                case c if "paladin" in c.lower():

                    # If at least level 3, full subclass, and not oathbreaker
                    if cls_level >= 3 and full_subclass_bool == 1 and cvar_subclass_dict[result_key[0]].lower() != "oathbreaker":

                        # If conquest, devotion, glory, redemption, vengeance, zeal, or the watchers
                        if cvar_subclass_dict[result_key[0]].lower() in ['conquest', 'devotion', 'glory', 'redemption', 'vengeance', "zeal", "the watchers"]:
                            class_list.append(f"Oath of {cvar_subclass_dict[result_key[0]]} Paladin ({cls_level})")

                        # if not conquest, devotion, glory, redemption, or vengeance
                        else:
                            class_list.append(f"Oath of the {cvar_subclass_dict[result_key[0]]} Paladin ({cls_level})")

                    # If at least level 3, not full subclass, or oathbreaker
                    elif cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Paladin ({cls_level})")

                    # If not at least level 3
                    else:
                        class_list.append(f"Paladin ({cls_level})")

                # If warlock
                case c if "warlock" in c.lower():
                    class_list.append(f"{cvar_subclass_dict[result_key[0]]} Warlock ({cls_level})")

                # If wizard
                case c if "wizard" in c.lower():

                    # If at least level 2, full subclass, and not bladesinger or war magic
                    if cls_level >= 2 and full_subclass_bool and cvar_subclass_dict[result_key[0]].lower() not in ["bladesinging", "war magic", "bladesinger", "blood magic", "force missile"]:

                        match cvar_subclass_dict[result_key[0]]:

                            # If scribes
                            case "Scribes":
                                class_list.append(f"Order of {cvar_subclass_dict[result_key[0]]} Wizard ({cls_level})")

                            # If graviturgist or chronurgy
                            case c if c in ['Graviturgy', 'Chronurgy', "Layline", "Origami"]:
                                class_list.append(f"{cvar_subclass_dict[result_key[0]]} Magic Wizard ({cls_level})")

                            # If not scribes, graviturgist, or chronurgy
                            case _:
                                class_list.append(f"School of {cvar_subclass_dict[result_key[0]]} Wizard ({cls_level})")

                    # If at least level 2, not full subclass, bladesinger, or war magic
                    elif cls_level >= 2:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} Wizard ({cls_level})")

                    # If not at least level 2
                    else:
                        class_list.append("Wizard (1)")

                # If other class
                case _:

                    # If at least level 3
                    if cls_level >= 3:
                        class_list.append(f"{cvar_subclass_dict[result_key[0]]} {result_key[0].split('Level')[0]} ({cls_level})")

                    # if not at least level 3
                    else:
                        class_list.append(f"{result_key[0].split('Level')[0]} ({cls_level})")

        # If no match
        else:
            if player_cls == "blood":
                player_cls = "Blood Hunter"

            class_list.append(f"{player_cls} ({cls_level})")

    # If multiclass
    if len(class_list) > 1:
        return "\n".join(class_list + ["", f"**Total levels:** {ch.levels.total_level}"])

    # If not multiclass       
    else:
        return "\n".join(class_list)


def get_passives(ch: character, ins_bool: int, inv_bool: int, perc_bool: int) -> str:
    """
    Grabs character's passives

    Args:
        ch (character): Character object
        ins_bool (int): If passive insight is included
        inv_bool (int): If passive investigation is included
        perc_bool (int): If passive perception is included 

    Return:
        (str): Resultant string
    """
    result_list = []

    # If passive insight or passive perception
    if ins_bool == 1 or perc_bool == 1:

        # If feats CVAR exists
        if (feat_cvar_test := ch.get_cvar('feats')):

            # If observant in CVAR
            if 'obs' in feat_cvar_test.lower():
                observant = True

            # If observant not in CVAR
            else:
                observant = False

        # If feats CVAR does not exist
        else:
            observant = False

        # If Passive Perception
        if perc_bool == 1:

            match (observant, typeof(ch.skills.perception.adv)):

                # Straight value
                case (False, "NoneType"):
                    result_list.append(f"**Passive Perception:** {10 + ch.skills['perception'].value}")

                # Observant
                case (True, "NoneType"):
                    result_list.append(f"**Passive Perception:** {10 + 5 + ch.skills['perception'].value} [observant]")

                # Advantage
                case (False, _):
                    result_list.append(f"**Passive Perception:** {10 + ch.skills['perception'].value + 5} [advantage]")

                # Observant and advantage
                case (True, _):
                    result_list.append(f"**Passive Perception:** {10 + 5 + ch.skills['perception'].value + 5} [observant and advantage]")

                # Disadvantage
                case (False, False):
                    result_list.append(f"**Passive Perception:** {10 + ch.skills['perception'].value - 5} [disadvantage]")

                # Observant and Disadvantage
                case (True, False):
                    result_list.append(f"**Passive Perception:** {10 + ch.skills['perception'].value} [observant and disadvantage]")
        
        # If not Passive Perception
        else:
            pass

        # If Passive Insight
        if ins_bool == 1:

            match (observant, typeof(ch.skills.insight.adv)):

                # Straight value
                case (False, "NoneType"):
                    result_list.append(f"**Passive Insight:** {10 + ch.skills['insight'].value}")

                # Observant
                case (True, "NoneType"):
                    result_list.append(f"**Passive Insight:** {10 + 5 + ch.skills['insight'].value} [observant]")

                # Advantage
                case (False, _):
                    result_list.append(f"**Passive Insight:** {10 + ch.skills['insight'].value + 5} [advantage]")

                # Observant and advantage
                case (True, _):
                    result_list.append(f"**Passive Insight:** {10 + 5 + ch.skills['insight'].value + 5} [observant and advantage]")

                # Disadvantage
                case (False, False):
                    result_list.append(f"**Passive Insight:** {10 + ch.skills['insight'].value - 5} [disadvantage]")

                # Observant and Disadvantage
                case (True, False):
                    result_list.append(f"**Passive Insight:** {10 + ch.skills['insight'].value} [observant and disadvantage]")
        
        # If not Passive Perception
        else:
            pass

    # If no Passive Perception or Passive Insight
    else:
        pass

    # If Passive Investigation
    if inv_bool == 1:

        match typeof(ch.skills.investigation.adv):

            # Straight Value
            case "NoneType":
                result_list.append(f"**Passive Investigation:** {10 + ch.skills['investigation'].value}")

            # Advantage
            case _ if ch.skills.investigation.adv:
                result_list.append(f"**Passive Investigation:** {10 + ch.skills['investigation'].value + 5} [advantage]")

            # Disadvantage
            case _:
                result_list.append(f"**Passive Investigation:** {10 + ch.skills['investigation'].value - 5} [disadvantage]")

    # If not Passive Investigation
    else:
        pass

    return "\n".join(result_list)
    

def main(input_list: list[str]) -> str:
    """
    Main program function

    Args:
        input_string (str): String given as input

    Output:
        (list): List of outputs
    """

    # Load character object
    ch = character()

    # If LFG settings exists, load dictionary
    if (svar_test := get_svar("lfg_settings")):
        svar_dict = set_default_settings(load_json(svar_test), {'subclass': 1, 'thp': 1, 'img': 1, 'player': 0, 'ac': 0, 'ins': 0, 'inv': 0, 'perc': 0, 'spell_list': 0, 'spell_slot': 0, 'full_subclass': 0, "color_lvl": {"0": ""}, "response_req": 0})

    # If LFG settings does not exist, use default settings
    else:
        svar_dict = {'subclass': 1, 'thp': 1, 'img': 1, 'player': 0, 'ac': 0, 'ins': 0, 'inv': 0, 'perc': 0, 'spell_list': 0, 'spell_slot': 0, 'full_subclass': 0, "color_lvl": {"0": ""}, "response_req": 0}

    # Set title
    title = f"{name} is looking for a group!"

    # If no character image or use character image not true
    if (thumb := ch.image) == "" or svar_dict['img'] == 0:
        thumb = "https://raw.githubusercontent.com/Shadow-Draconic-Development/Avrae-Looking-For-Group/main/Data/image.png"

    # If response required and no inputs
    if svar_dict['response_req'] == 1 and len(input_list) <= 0:
        return f"You Have Been Sneak Attacked by an Error", "You are required to give a quest suggestion/response", thumb, "#CC0202"

    # Create output
    f = [
        "**Quest:** " + " ".join(input_list)
    ]

    # Get classes
    f.append(get_classes(ch, svar_dict['subclass'], svar_dict['full_subclass']))

    # If display THP
    if svar_dict['thp'] == 1:
        f.append(f"**HP:** {ch.hp_str()}")

    # if not display THP
    else:
        f.append(f"**HP:** {ch.hp}")

    # Show AC
    if svar_dict['ac'] == 1:
        f.append(f"**AC:** {ch.ac}")

    # If any passives
    if svar_dict['ins'] == 1 or svar_dict['inv'] == 1 or svar_dict['perc'] == 1:
        f.append(get_passives(ch, svar_dict['ins'], svar_dict['inv'], svar_dict['perc']))

    # If show spell list and spell list has at least one spell
    if svar_dict['spell_list'] == 1 and len((spell_list := [spell.name for spell in ch.spellbook.spells if spell.prepared])) > 0:
        f.append("**Prepared Spell List:** " + ", ".join(spell_list))

    # If show spell slots and has at least one spell slot
    if svar_dict['spell_slot'] == 1 and len((spell_book := [ch.spellbook.slots_str(i) for i in range(1, 10) if ch.spellbook.slots_str(i) != "No spell slots."])) > 0:
        spell_book.insert(0, "**Spell Slots:**")

        f.append("\n".join(spell_book))

    # If mention player (does not do an actual ping)
    if svar_dict['player'] == 1:
        f.append(f"<@{ch.owner}>")

    current_time = time()

    # If crafting alias is used, load dictionary
    if (crafting_svar_test := get_svar('crafting_settings')):
        crafting_svar_dict = load_json(crafting_svar_test)

        # If lfg integration in settings
        if "lfg_integration" in crafting_svar_dict.keys():

            # If LFG integrations
            if crafting_svar_dict["lfg_integration"]:

                # If CVAR exists, load dictionary
                if (crafting_cvar_test := ch.get_cvar('crafting_dict')):
                    crafting_cvar_dict = load_json(crafting_cvar_test)

                    # Try to calculate time
                    try:

                        # If cooldown active
                        if current_time < crafting_cvar_dict['time'] + crafting_svar_dict[crafting_cvar_dict['category']][crafting_dictionary['type']][6]:
                            f.append("`This character's crafting cooldown has not expired`")

                    # If there was a problem
                    except:
                        f.append("`Problems have occured with the crafting integration, please contact Shadow through his request form in the workshop`")

    # If taming alias is used and CVAR exists, load dictionaries
    if (taming_svar_test := get_svar("tame_settings")) and (taming_cvar_test := ch.get_cvar("tame_dict")):
        taming_svar_dict = load_json(taming_svar_test)
        taming_cvar_dict = load_json(taming_cvar_test)

        # If settings exists
        if "settings" in taming_svar_dict.keys():

            # If lfg_integration in settings and next tame in CVAR
            if "lfg_integration" in taming_svar_dict["settings"].keys() and "next_tame" in taming_cvar_dict.keys():

                # If lfg integration and past time
                if taming_svar_dict["settings"]["lfg_integration"] and current_time < taming_cvar_dict["next_tame"]:
                    f.append("`This character's taming cooldown has not expired`")

    # If color level is a dicionary        
    if typeof(svar_dict['color_lvl']) == "SafeDict":
        color = ""

        try:
            # Create new list and sort them
            color_threshold_list = [int(thresh) for thresh in svar_dict['color_lvl'].keys()]
            color_threshold_list.sort()

            # For each color threshold
            for color_threshold in color_threshold_list:

                # If pass threshold
                if ch.levels.total_level >= int(color_threshold):
                    color =  svar_dict['color_lvl'][color_threshold]

                # If not pass threshold
                else:
                    break

        # If it tried to convert a str to an int
        except:
            pass

    # If color level is a string
    elif typeof(svar_dict['color_lvl']) == "str":
        color = svar_dict['color_lvl']

    # If color level is a list
    else:
        
        # If length of list is greater than 0
        if len(svar_dict['color_lvl']) > 0:
            color = randchoice(svar_dict['color_lvl'])

        # If length of list is 0
        else:
            color = ""
        
    return title, "\n\n".join(f), thumb, color


# Main program
title, f, thumb, color = main(&ARGS&)
l = "<"


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}lfg {{l}}phrase> | 10/19/25 | ShadowsStride"